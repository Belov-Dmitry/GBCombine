import UIKit
import Combine
import Foundation

let subjectString = PassthroughSubject<String, Error>()
let subjectUnicode = PassthroughSubject<Character, Error>()

let dwarf: Character = "\u{1F385}" //–≥–Ω–æ–º–∏–∫
let gold: Character = "\u{1F4B0}" //–∑–æ–ª–æ—Ç–æ
let search: Character = "\u{1F50E}" //–∏—Å–∫–∞–ª

let cap: Character = "\u{1FA96}" //–∫–æ–ª–ø–∞–∫
let se: Character = "\u{2717}" //—Å–≤–æ–π
let lost: Character = "\u{1F926}" //–ø–æ—Ç–µ—Ä—è–ª1F926

let satDown: Character = "\u{1FA91}" //—Å–µ–ª
let cry: Character = "\u{1F62D}" //–∑–∞–ø–ª–∞–∫–∞–ª
let trouble: Character = "\u{2753}" //–∫–∞–∫ –∂–µ –±—ã—Ç—å

let arrow: Character = "\u{2794}" //–≤—ã—Ö–æ–¥–∏
let go: Character = "\u{1FAF5}" //—Ç–µ–±–µ
let roundDance: Character = "\u{1F973}" //–≤–æ–¥–∏—Ç—å

let unicode = [dwarf, gold, search, cap, se, lost, satDown, cry, trouble, arrow, go, roundDance]

let subscription1 = subjectString
    .collect(.byTime(DispatchQueue.main, .seconds(0.5)))
    .sink(receiveCompletion: { print($0) },
          receiveValue: {
        for v in $0.unicodeScalars {
        print(v.value) }
    })

DispatchQueue.main.asyncAfter(deadline: .now() + 0.0, execute: {
    subjectString.send("–ì–Ω–æ–º–∏–∫ ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 0.2, execute: {
    subjectString.send("–∑–æ–ª–æ—Ç–æ ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 0.4, execute: {
    subjectString.send("–∏—Å–∫–∞–ª ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 1.0, execute: {
    subjectString.send("–ò –∫–æ–ª–ø–∞–∫ ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 1.2, execute: {
    subjectString.send("—Å–≤–æ–π ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 1.4, execute: {
    subjectString.send("–ø–æ—Ç–µ—Ä—è–ª! ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 2.0, execute: {
    subjectString.send("–°–µ–ª, ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 2.2, execute: {
    subjectString.send("–∑–∞–ø–ª–∞–∫–∞–ª: ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 2.4, execute: {
    subjectString.send("¬´–ö–∞–∫ –∂–µ –±—ã—Ç—å?!¬ª ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 3.0, execute: {
    subjectString.send("–í—ã—Ö–æ–¥–∏! ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 3.2, execute: {
    subjectString.send("–¢–µ–±–µ ")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 3.4, execute: {
    subjectString.send("–≤–æ–¥–∏—Ç—å!")
})
DispatchQueue.main.asyncAfter(deadline: .now() + 4.0, execute: {
    subjectString.send(completion: .finished)
})

let subscription2 = subjectUnicode
    .collect(3)
    .sink(receiveCompletion: { print($0) },
          receiveValue: { print($0) })

for item in unicode {
DispatchQueue.main.asyncAfter(deadline: .now() + 4.2, execute: {
    subjectUnicode.send(item)
    })
}
DispatchQueue.main.asyncAfter(deadline: .now() + 4.4, execute: {
    subjectUnicode.send(completion: .finished)
})


//--------------–ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤---------------------

let verse = ["–ì–Ω–æ–º–∏–∫ ", "–∑–æ–ª–æ—Ç–æ ", "–∏—Å–∫–∞–ª ",
             "–ò –∫–æ–ª–ø–∞–∫ ", "—Å–≤–æ–π ", "–ø–æ—Ç–µ—Ä—è–ª! ",
             "–°–µ–ª, ", "–∑–∞–ø–ª–∞–∫–∞–ª: ", "¬´–ö–∞–∫ –∂–µ –±—ã—Ç—å?!¬ª ",
             "–í—ã—Ö–æ–¥–∏! ", "–¢–µ–±–µ", "–≤–æ–¥–∏—Ç—å!"].publisher

let emoji = ["üéÖüèª", "üí∞", "üîé",
             "ü™ñ", "‚ùå", "ü§∑üèª‚Äç‚ôÇÔ∏è",
             "ü™ë", "üò≠", "‚ÅâÔ∏è",
             "‚û°Ô∏è", "ü´µ", "ü•≥"].publisher

verse
    .zip(emoji)
    .collect(3)
    .sink(receiveCompletion: { print($0) },
          receiveValue: { print($0) })
